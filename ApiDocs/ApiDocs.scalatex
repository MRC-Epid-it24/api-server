@import Main._
@import apidocs.IntroExamples
@import apidocs.SigninExamples
@import apidocs.UserManagementExamples
@import apidocs.DataExportExamples

@sect{Intake24 JSON API}

  @p
    @i{Version 2.13.0}

  @p
    @i{Food database API documentation is temporarily unavailable because it is out of date}

  @p
    Intake24 (@a("https://intake24.co.uk", href := "https://intake24.co.uk")) is a self-completed computerised dietary recall system 
    based on multiple-pass 24-hour recall. The online system offers similar data quality to interviewer-led recalls at a significantly lower cost.
    
  @p
    The Intake24 API is designed to provide access to the underlying food database used by the system in order to build custom
    applications that require estimation of the nutrient intake.
    
  @sect{Introduction}
    @p
      Intake24 API uses several data encoding conventions that are slightly different from what is usually encountered
      in other JSON-based APIs. These conventions are explained below and are used throughout the system.
    @sect{Optional type}
      @p
        Optional values are encoded as JSON arrays with either zero elements (when the value is not present):
          @hl.js{@IntroExamples.optionalStringMissing}
        or exactly one element (when the value is present):
          @hl.js{@IntroExamples.optionalStringPresent}
        as opposed to the more popular convention of omitting the optional fields altogether in case the value is missing.
      @p
        The reason behind such encoding is that optional types in Intake24 can form a part of a more complex type. For instance,
        a type which is either an optional string, or a number (see also the explanation of the Either type below) is encoded as
        follows:
          @hl.js{@IntroExamples.eitherOption}
        the missing left value could potentially be encoded as @b{null}, but that would be inconsistent with the case where the
        optional value is a field and it would also make it impossible to tell which values are intended to be optional. Having
        an explicit optional value encoding allows to assume that no value can ever be @b{null} and avoid unnecessary nullness checking
        and null pointer exceptions.
      @p
        Another less practical reason for this encoding is that it would otherwise be impossible to encode a nested optional value as a field.
        In this example, "value" is an optional value that is present that wraps another optional value that is missing:
          @hl.js{@IntroExamples.nestedOptionMissingInner}
        It would be impossible to encode the presence of the outer value using field omission if the inner value was missing.
      @p
        Of course such types are unlikely to be used in practice, however they must still be possible to encode
        to ensure the robustness of the server-side automated JSON mapping system. See @a("https://github.com/lihaoyi/upickle-pprint/issues/75", href := "https://github.com/lihaoyi/upickle-pprint/issues/75") for
        further discussion.

    @sect{Either type}
      @p
        The Either type represents values with two possibilities, traditionally called left and right. The Either type is encoded as a JSON array of
        exactly 2 elements, where the first element is either 0 or 1. If the first element is 0, then the second element must be parsed as a value of
        the left type. If it is 1, then the second element must be parsed as the right type.
      @p
        For instance, @b{foodOrCategory} could be either a food header or a category header. These types are incompatible and must be handled differently. If it is a food header (left type),
        it will be encoded as follows:
          @hl.js{@IntroExamples.eitherFood}
        and if it is a category header (right type) it will be encoded like this:
          @hl.js{@IntroExamples.eitherCategory}

  @sect{Authentication}
    @p
      Intake24 uses a two-stage authentication system that is based on two classes of authentication tokens called refresh and access tokens.
    @p
      @b{Refresh tokens} are issued through a credentials (i.e. user name and password) based authentication procedure. Refresh tokens are similar
      to the traditional API keys in that they are long-lived and must be stored securely by the API client for long-term use once the credentials
      have been authenticated.
    @p
      @b{Access tokens} are required to access the actual API endpoints. Access tokens are obtained by presenting a valid refresh token to the server.
      They are short-lived; the exact validity period depends on the server configuration but is typically 10 minutes up to 2 hours. They cannot be
      extended and a new token must be obtained if the previous one has expired.
    @p
      See @a("https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/", href:="https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/")
      for an in-depth explanation of the refresh/access token system.
    @sect{Access token expiration}
      @p
        The client applicaton must expect that an access token can expire at any time and consequently any request can be denied with the
        @hl.asciidoc{HTTP 401 Unauthorized} code. In that case, the application must obtain a new access token and retry the request.
    @sect{Signing in using a global account}
      To obtain a @b{refresh} token for a global system account (e.g. admin or survey staff), @b{POST} a sign in request to
        @p
          @hl.asciidoc{/signin}
        @p
          with the following JSON body:
            @hl.js{@SigninExamples.emailSigninRequest}
        @p
          where
        @ul
          @li
            @b{email} is the user's system-wide e-mail address
          @li
            @b{password} is the user's password
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}: successful authentication.
              @p The body is a JSON object containing a single field, @b{refreshToken}: @hl.js{@SigninExamples.signInResult}
              @p The application must cache the refresh token securely for long-term use.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the provided credentials were not recognised.
    @sect{Signing in using a survey alias}
        To obtain a @b{refresh} token for a survey respondent using their internal survey alias, @b{POST} a sign in request to
          @p
            @hl.asciidoc{/signin/alias}
          @p
            with the following JSON body:
              @hl.js{@SigninExamples.aliasSigninRequest}
          @p
            where
          @ul
            @li
              @b{survey_id} is the optional survey_identifier for the user that you are signing in as (user names are unique w.r.t individual surveys, but not system-wide).
              This field should contain an empty value if the user you would like to sign in as is a system-wide user, such as an administrator (see @sect.ref{Optional type}).
            @li
              @b{username} is the survey user ID (does not have to be unique system-wide)
            @li
              @b{password} is the user's password
          @sect{Response}
            @ul
              @li
                @p @hl.asciidoc{HTTP 200 OK}: successful authentication.
                @p The body is a JSON object containing a single field, @b{refreshToken}: @hl.js{@SigninExamples.signInResult}
                @p The application must cache the refresh token securely for long-term use.
              @li
                @p @hl.asciidoc{HTTP 401 Unauthorized}: the provided credentials were not recognised.
    @sect{Signing in using an URL-embedded token}
         To obtain a @b{refresh} token for a survey respondent using the URL-embedded authentication token, @b{POST} a sign in request to
           @p
             @hl.asciidoc{/signin/token/<token>}
           @p
             where
           @ul
             @li
               @b{token} is the user's personal authentication token
           @sect{Response}
             @ul
               @li
                 @p @hl.asciidoc{HTTP 200 OK}: successful authentication.
                 @p The body is a JSON object containing a single field, @b{refreshToken}: @hl.js{@SigninExamples.signInResult}
                 @p The application must cache the refresh token securely for long-term use.
               @li
                 @p @hl.asciidoc{HTTP 401 Unauthorized}: the provided credentials were not recognised.
    @sect{Refreshing the access token}
      To obtain a new @b{access} token, @b{POST} a refresh request to
        @p
          @hl.asciidoc{/refresh}
        @p
          with an empty body and the value of a valid @b{refresh} token in the @hl.asciidoc{X-Auth-Token} header.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}: successful access token renewal.
              @p The body is JSON object containing a single field, @b{accessToken}: @hl.js{@SigninExamples.refreshResult}
              @p
                The application must cache and reuse the access token until it is rejected with the @hl.asciidoc{HTTP 401 Unauthorized} code, in which case the application must request
                a new access token using this end-point and retry the affected request. Existing access tokens are automatically expired and do not need to be de-activated explicitly.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the refresh token is missing or invalid.
    @sect{Using the access token}
      @p Any API request that requires authentication (all of them at the moment) must include the access token exactly as returned by the server.
      @p The token should be sent in the @hl.asciidoc{X-Auth-Token} header.
      @p The @hl.asciidoc{HTTP 401 Unauthorized} response must be expected for any API request. To correctly handle this response, the application must request a new access token
         and retry the request.

  @sect{User management}

    @sect{CSV file format for user records}
      @p
        The CSV file format for user records is as follows:
      @p
        @{
          table(tr(th("User name"), th("Password"), th("Name"), th("E-mail"), th("Phone"), th("Custom field 1"), th("...")),
                tr(td("user1"), td("P455w0rd"), td("John Smith"), td("john@smith.com"), td(""), td("Custom value 1"), td("...")),
                tr(td("user2"), td("P455w0rd"), td("Jack Black"), td("jack@black.com"), td("+44123123123"), td("Custom value 1"), td("...")),
                tr(td("..."), td("..."), td("..."), td("..."), td("..."), td("..."), td("...")))
        }
      @p
        The first two columns of the header (first row) are mandatory and must be @b{"User name"} and @b{"Password"}, in that order. Other columns order is not fixed.
      @p
        The system will accept the following optional standard column names:
        @ul
          @li
            @b{"Name"} for the user's real name
          @li
            @b{"E-mail"} OR @b{"Email"} for the user's e-mail address
          @li
            @b{"Phone"} for the user's phone number
      @p
        If one of these columns is missing, or if some individual cells in one of the optional columns are blank, then the corresponding fields
        in the user records will be empty.
      @p
        All other column names will be treated as custom data fields and will go to the user's custom fields map.

    @sect{List global user accounts}
      To get a list of system-wide user accounts, that is accounts that are not associated with a particular survey,
        @p
          @b{GET} @hl.asciidoc{/admin/users?offset=<offset>&limit=<limit>}
        @p
          where
          @ul
            @li
              @b{offset} is the number of records to skip.
            @li
              @b{limit} is the number of records to return, starting at @b{offset}. There is a hard limit of 1000 records that can be returned at once.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}
              @p The body is a JSON array of global user record objects:
              @p
                @hl.js{@UserManagementExamples.globalUserRecord}
              @p
                 where
                  @ul
                    @li
                      @b{userName} is the user ID required to sign in,
                    @li
                      @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                    @li
                      @b{email} is the optional e-mail address,
                    @li
                      @b{phone} is the optional phone number (used for SMS notifications),
                    @li
                      @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),
                    @li
                      @b{roles} is the set of general roles for this user,
                    @li
                      @b{permissions} is the set of fine-grained permissions for this user.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
    @sect{Create/update global user accounts}
      To create or update system-wide user accounts,
      @p
        @b{POST} @hl.asciidoc{/admin/users/create-or-update}
      @p
        with a body consisting of a JSON object with a single field, @b{userRecords}, containing an array of user record objects:
        @p
          @hl.js{@UserManagementExamples.globalUserUpdate}
        @p
           where
            @ul
              @li
                @b{userName} is the user ID required to sign in,
              @li
                @b{password} is the user's password required to sign in,
              @li
                @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
              @li
                @b{email} is the optional e-mail address,
              @li
                @b{phone} is the optional phone number (used for SMS notifications),
              @li
                @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),
              @li
                @b{roles} is the set of general roles for this user,
              @li
                @b{permissions} is the set of fine-grained permissions for this user.

        @p
          @b{Note:} if there is already a user record matching one of the specified user names, the record will be updated. Otherwise, a new record will be created.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.

    @sect{Delete global users}
      To delete one or more system-wide users,
      @p
        @b{DELETE} @hl.asciidoc{/admin/users/delete}
      @p
        with a body consisting of a JSON object with a single field, @b{userNames}, containing an array of user names to delete:
      @p
        @hl.js{@UserManagementExamples.globalUserDelete}
      @p
        @b{Note:} users names that don't match any existing user records will be ignored.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully deleted (or ignored if not found).
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.

    @sect{List survey staff accounts}
      To get a list of staff user accounts for a survey,
        @p
          @b{GET} @hl.asciidoc{/admin/users/<survey_id>/staff?offset=<offset>&limit=<limit>}
        @p
          where
          @ul
            @li
              @b{survey_id} is the survey identifier,
            @li
              @b{offset} is the number of records to skip,
            @li
              @b{limit} is the number of records to return, starting at @b{offset}. There is a hard limit of 1000 records that can be returned at once.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}
              @p The body is a JSON array of survey user record objects:
              @p
                @hl.js{@UserManagementExamples.surveyUserRecord}
              @p
                 where
                  @ul
                    @li
                      @b{userName} is the user ID required to sign in,
                    @li
                      @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                    @li
                      @b{email} is the optional e-mail address,
                    @li
                      @b{phone} is the optional phone number (used for SMS notifications),
                    @li
                      @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
            @li
              @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.

    @sect{Create/update survey staff accounts}
      To create or update staff accounts for a survey,
        @p
          @b{POST} @hl.asciidoc{/admin/users/<survey_id>/staff/create-or-update}
        @p
          where
          @ul
            @li
              @b{survey_id} is the survey identifier
        @p
          with a body consisting of a JSON object with a single field, @b{userRecords}, containing an array of user record objects:
          @p
            @hl.js{@UserManagementExamples.surveyUserUpdate}
          @p
             where
              @ul
                @li
                  @b{userName} is the user ID required to sign in,
                @li
                  @b{password} is the user's password required to sign in,
                @li
                  @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                @li
                  @b{email} is the optional e-mail address,
                @li
                  @b{phone} is the optional phone number (used for SMS notifications),
                @li
                  @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),

        @p
          @b{Note:} if there is already a user record matching one of the specified user names, the record will be updated. Otherwise, a new record will be created.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
            @li
              @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.
    @sect{Upload survey staff accounts using CSV}
      To create or update staff accounts for a survey using a CSV file,
      @p
        @b{POST} @hl.asciidoc{/admin/users/<survey_id>/staff/upload-csv}
      @p
        where
        @ul
          @li
            @b{survey_id} is the survey identifier
      @p
        with a @b{multipart/form-data} body with a file attachment in the CSV format (see @sect.ref{CSV file format for user records}). The name of the file and the name of the form field are ignored.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
          @li
            @p @hl.asciidoc{HTTP 400 Bad Request}: the file format is incorrect.
          @li
            @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.

    @sect{List survey respondents}
     To get a list of respondent user accounts for a survey,
        @p
          @b{GET} @hl.asciidoc{/admin/users/<survey_id>/respondents?offset=<offset>&limit=<limit>}
        @p
          where
          @ul
            @li
              @b{survey_id} is the survey identifier,
            @li
              @b{offset} is the number of records to skip,
            @li
              @b{limit} is the number of records to return, starting at @b{offset}. There is a hard limit of 1000 records that can be returned at once.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}
              @p The body is a JSON array of survey user record objects:
              @p
                @hl.js{@UserManagementExamples.surveyUserRecord}
              @p
                 where
                  @ul
                    @li
                      @b{userName} is the user ID required to sign in,
                    @li
                      @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                    @li
                      @b{email} is the optional e-mail address,
                    @li
                      @b{phone} is the optional phone number (used for SMS notifications),
                    @li
                      @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
            @li
              @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.

    @sect{Create/update survey respondent accounts}
          To create or update respondent accounts for a survey,
            @p
              @b{POST} @hl.asciidoc{/admin/users/<survey_id>/respondents/create-or-update}
            @p
              where
              @ul
                @li
                  @b{survey_id} is the survey identifier
            @p
              with a body consisting of a JSON object with a single field, @b{userRecords}, containing an array of user record objects:
              @p
                @hl.js{@UserManagementExamples.surveyUserUpdate}
              @p
                 where
                  @ul
                    @li
                      @b{userName} is the user ID required to sign in,
                    @li
                      @b{password} is the user's password required to sign in,
                    @li
                      @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                    @li
                      @b{email} is the optional e-mail address,
                    @li
                      @b{phone} is the optional phone number (used for SMS notifications),
                    @li
                      @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),

            @p
              @b{Note:} if there is already a user record matching one of the specified user names, the record will be updated. Otherwise, a new record will be created.
            @sect{Response}
              @ul
                @li
                  @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
                @li
                  @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
                @li
                  @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
                @li
                  @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.


    @sect{Upload survey respondent accounts using CSV}
     To create or update respondent accounts for a survey using a CSV file,
      @p
        @b{POST} @hl.asciidoc{/admin/users/<survey_id>/respondents/upload-csv}
      @p
        where
        @ul
          @li
            @b{survey_id} is the survey identifier
      @p
        with a @b{multipart/form-data} body with a file attachment in the CSV format (see @sect.ref{CSV file format for user records}). The name of the file and the name of the form field are ignored.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
          @li
            @p @hl.asciidoc{HTTP 400 Bad Request}: the file format is incorrect.
          @li
            @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.

    @sect{Create survey respondent accounts for site integration}
      To create respondent accounts for use with URL-embedded token authentication model (useful for linking to Intake24 surveys
      from 3rd party sites),
      @p
        @b{POST} @hl.asciidoc{/surveys/<survey_id>/users/respondents/with-physical-data}
      @p
        where
        @ul
          @li
            @b{survey_id} is the survey identifier
      @p
        with the following JSON body:
          @hl.js{@UserManagementExamples.createRespondentsWithPhysicalDataRequest}
      @p
        where
        @ul
          @li
            @b{users} is an array of new user account information objects, where
            @ul
              @li
                @b{externalId} is an arbitrary string uniquely identifying the user in the external database; typically the user's e-mail or a numerical user ID,
              @li
                @b{name} is the optional real name of this user,
              @li
                @b{email} is the optional e-mail address for this user (to receive e-mail reminders/notifications),
              @li
                @b{phone} is the optional phone number for this user (to receive SMS reminders/notifications),
              @li
                @b{sex} is the optional user's sex, "m" for male or "f" for female,
              @li
                @b{birthdate} is the optional user's date of birth, in the ISO 8601 date format (e.g. "2017-04-25"),
              @li
                @b{weight} is the optional user's current weight, in kilograms,
              @li
                @b{height} is the optional user's height, in centimeters
      @sect{Response}
            @ul
              @li
                @p @hl.asciidoc{HTTP 200 OK}: user accounts have been successfully created. Response body is a JSON object:
                  @hl.js{@UserManagementExamples.createRespondentsWithPhysicalDataResponse}
                @p
                  where
                  @ul
                    @li
                      @p
                        @b{userData} is an array of objects describing the newly created user accounts corresponding to the
                        @b{users} array in the request object, where
                      @ul
                        @li
                          @p @b{userId} is the Intake24 user ID for the new user (required to update or delete the user account later),
                        @li
                          @p @b{externalId} is the external user ID as given in the request,
                        @li
                          @p @b{urlAuthToken} is the URL-embeddable authentication token for simple cross-site authentication
              @li
                @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
              @li
                @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
              @li
                @p @hl.asciidoc{HTTP 400 Bad Request}: the request format is incorrect.
              @li
                @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.
    @sect{Delete user accounts}
     To delete one or more users,
      @p
        @b{DELETE} @hl.asciidoc{/users}
      @p
        with a body consisting of a JSON object with a single field, @b{userIds}, containing an array of Intake24 user IDs to delete:
      @p
        @hl.js{@UserManagementExamples.globalUserDelete}
      @p
        @b{Note:} users names that don't match any existing user records will be ignored.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully deleted (or ignored if not found).
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
          @li
            @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.

  @sect{Data export}
    @sect{Download survey submissions}
      @p
        To get the survey submissions as JSON,
      @p
        @b{GET}
      @p
        @hl.asciidoc{/surveys/<survey_id>/submissions?dateFrom=<date_from>&dateTo=<date_to>&offset=<offset>&limit=<limit>}
      @p
        where
        @ul
          @li
            @b{survey_id} is the survey identifier,
          @li
            @b{date_from} is the timestamp for the beginning of time period to download submissions for,
          @li
            @b{date_to} is the timestamp for the end of time period to download submissions for,
          @li
            @b{offset} is the number of records to skip (in the specified time period),
          @li
            @b{limit} is the number of records to return (in the specified time period), starting at @b{offset}. There is a hard limit of 1000 records that can be returned at once.
        @p
          @b{Note:} dates are expected in the @a("ISO 8601 format", href:="https://en.wikipedia.org/wiki/ISO_8601"), e.g. @b{"2017-02-10T11:49:12Z"}.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}
            @p
            The body is a JSON array of survey submission objects:
            @p
              @hl.js{@DataExportExamples.surveySubmissions}
            @p
               where
                @ul
                  @li
                    @b{id} is the unique identifier of the submission,
                  @li
                    @b{userName} is the identifier of the respondent that made the submission,
                  @li
                    @b{userCustomData} is an object with custom data fields for the user that made the submission (for custom survey schemes, empty for standard scheme),
                  @li
                    @b{surveyCustomData} is an object with custom data fields for the submission (for custom survey schemes, empty for standard scheme),
                  @li
                    @b{startTime} is the time when the respondent has started filling out the survey (in @a("ISO 8601 format", href:="https://en.wikipedia.org/wiki/ISO_8601")),
                  @li
                    @b{endTime} is the time when the respondent has submitted the survey (in @a("ISO 8601 format", href:="https://en.wikipedia.org/wiki/ISO_8601")),
                  @li
                    @b{meals} is an array of objects describing the meals in this submission, where
                    @ul
                      @li
                        @b{name} is the name of the meal as specified by the respondent,
                      @li
                        @b{time} is the time of the meal as specified by the respondent, represented as an object with two fields, @b{hours} and @b{minutes},
                      @li
                        @b{customData} is an object with custom data fields for this meal (for custom survey schemes, empty for standard scheme),
                      @li
                        @b{foods} is an array of objects describing the foods in this meal, where
                        @ul
                          @li
                            @b{code} is the Intake24 food code,
                          @li
                            @b{englishDescription} is the English description of this food (from the food database record),
                          @li
                            @b{localDescription} is the local description of the food in the survey's locale, if available (see @sect.ref{Optional type}),
                          @li
                            @b{searchTerm} is the description of this food as originally typed by the respondent before the database lookup,
                          @li
                            @b{nutrientTableId} is the identifier of the food composition table that is the source of nutritional composition information for this food,
                          @li
                            @b{nutrientTableCode} is the identifier of the record in the food composition table that this food is mapped to,
                          @li
                            @b{isReadyMeal} is a boolean value specifying if the respondent has marked this food as a ready meal,
                          @li
                            @b{portionSize} is the result of the portion size estimation, where
                            @ul
                              @li
                                @b{method} is the identifier of the portion size estimation method used for this food,
                              @li
                                @b{data} is an object with the data fields specific to the portion size estimation method,
                                however two fields are always present: @b{servingWeight} and @b{leftoversWeight} that correspond
                                to the weight of the original serving and the weight of the leftovers as determined by this
                                portion size estimation methods. The weights are always in grams (or milliliters for liquids)
                                and are given by strings containing floating point numbers in decimal format.
                          @li
                            @b{reasonableAmount} is a boolean value that is the result of the "reasonable amount" check, a simple check that tests if the food
                            amount is realistic (specified per food in the database),
                          @li
                            @b{foodGroupId} is the identifier of the food group this food belongs to,
                          @li
                            @b{brand} is the brand of this food, if known, or a blank string,
                          @li
                            @b{nutrients} is an array containing nutritional information, where each element is a two-element array where the first element is
                            the identifier of the nutrient type and the second element is the weight or volume (units are dependent on the nutrient type).
                          @li
                            @b{customData} is is an object with custom data fields for this food (for custom survey schemes, empty for standard scheme).
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
          @li
            @p @hl.asciidoc{HTTP 400 Bad Request}: request parameters missing or invalid.
          @li
            @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.
    @sect{Download survey submissions (CSV)}
      @p
        To download survey submissions as a CSV spreadsheet,
      @p
        @b{GET} 
      @p
        @hl.asciidoc{/surveys/<survey_id>/submissions/csv?dateFrom=<date_from>&dateTo=<date_to>}
       where
        @ul
          @li
            @b{survey_id} is the survey identifier,
          @li
            @b{date_from} is the timestamp for the beginning of time period to download submissions for,
          @li
            @b{date_to} is the timestamp for the end of time period to download submissions for.
        @p
          @b{Note:} dates are expected in the @a("ISO 8601 format", href:="https://en.wikipedia.org/wiki/ISO_8601"), e.g. @b{"2017-02-10T11:49:12Z"}.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}: the body is the output spreadsheet in CSV format.
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
          @li
            @p @hl.asciidoc{HTTP 400 Bad Request}: request parameters missing or invalid.
          @li
            @p @hl.asciidoc{HTTP 404 Not Found}: the survey identifier is invalid.
