@import Main._
@import apidocs.IntroExamples
@import apidocs.SigninExamples
@import apidocs.UserManagementExamples

@sect{Intake24 JSON API}

  @p
    @i{Version 2.11.0}

  @p
    Intake24 (@a("https://intake24.co.uk", href := "https://intake24.co.uk")) is a self-completed computerised dietary recall system 
    based on multiple-pass 24-hour recall. The online system offers similar data quality to interviewer-led recalls at a significantly lower cost.
    
  @p
    The Intake24 API is designed to provide access to the underlying food database used by the system in order to build custom
    applications that require estimation of the nutrient intake.
    
  @sect{Introduction}
    @p
      Intake24 API uses several data encoding conventions that are slightly different from what is usually encountered
      in other JSON-based APIs. These conventions are explained below and are used throughout the system.
    @sect{Optional type}
      @p
        Optional values are encoded as JSON arrays with either zero elements (when the value is not present):
          @hl.js{@IntroExamples.optionalStringMissing}
        or exactly one element (when the value is present):
          @hl.js{@IntroExamples.optionalStringPresent}
        as opposed to the more popular convention of omitting the optional fields altogether in case the value is missing.
      @p
        The reason behind such encoding is that optional types in Intake24 can form a part of a more complex type. For instance,
        a type which is either an optional string, or a number (see also the explanation of the Either type below) is encoded as
        follows:
          @hl.js{@IntroExamples.eitherOption}
        the missing left value could potentially be encoded as @b{null}, but that would be inconsistent with the case where the
        optional value is a field and it would also make it impossible to tell which values are intended to be optional. Having
        an explicit optional value encoding allows to assume that no value can ever be @b{null} and avoid unnecessary nullness checking
        and null pointer exceptions.
      @p
        Another less practical reason for this encoding is that it would otherwise be impossible to encode a nested optional value as a field.
        In this example, "value" is an optional value that is present that wraps another optional value that is missing:
          @hl.js{@IntroExamples.nestedOptionMissingInner}
        It would be impossible to encode the presence of the outer value using field omission if the inner value was missing.
      @p
        Of course such types are unlikely to be used in practice, however they must still be possible to encode
        to ensure the robustness of the server-side automated JSON mapping system. See @a("https://github.com/lihaoyi/upickle-pprint/issues/75", href := "https://github.com/lihaoyi/upickle-pprint/issues/75") for
        further discussion.

    @sect{Either type}
      @p
        The Either type represents values with two possibilities, traditionally called left and right. The Either type is encoded as a JSON array of
        exactly 2 elements, where the first element is either 0 or 1. If the first element is 0, then the second element must be parsed as a value of
        the left type. If it is 1, then the second element must be parsed as the right type.
      @p
        For instance, @b{foodOrCategory} could be either a food header or a category header. These types are incompatible and must be handled differently. If it is a food header (left type),
        it will be encoded as follows:
          @hl.js{@IntroExamples.eitherFood}
        and if it is a category header (right type) it will be encoded like this:
          @hl.js{@IntroExamples.eitherCategory}

  @sect{Authentication}
    @p
      Intake24 uses a two-stage authentication system that is based on two classes of authentication tokens called refresh and access tokens.
    @p
      @b{Refresh tokens} are issued through a credentials (i.e. user name and password) based authentication procedure. Refresh tokens are similar
      to the traditional API keys in that they are long-lived and must be stored securely by the API client for long-term use once the credentials
      have been authenticated.
    @p
      @b{Access tokens} are required to access the actual API endpoints. Access tokens are obtained by presenting a valid refresh token to the server.
      They are short-lived; the exact validity period depends on the server configuration but is typically 10 minutes up to 2 hours. They cannot be
      extended and a new token must be obtained if the previous one has expired.
    @p
      See @a("https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/", href:="https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/")
      for an in-depth explanation of the refresh/access token system.
    @sect{Access token expiration}
      @p
        The client applicaton must expect that an access token can expire at any time and consequently any request can be denied with the
        @hl.asciidoc{HTTP 401 Unauthorized} code. In that case, the application must obtain a new access token and retry the request.
    @sect{Signing in}
      To obtain a @b{refresh} token, @b{POST} a sign in request to
        @p
          @hl.asciidoc{/signin}
        @p
          with the following JSON body:
            @hl.js{@SigninExamples.signInRequest}
        @p
          where
        @ul
          @li
            @b{survey_id} is the optional survey identifier for the user that you are signing in as (user names are unique w.r.t individual surveys, but not system-wide).
            This field should contain an empty value if the user you would like to sign in as is a system-wide user, such as an administrator (see @sect.ref{Optional type}).
          @li
            @b{username} is the unique user ID
          @li
            @b{password} is the user's password
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}: successful authentication.
              @p The body is a JSON object containing a single field, @b{refreshToken}: @hl.js{@SigninExamples.signInResult}
              @p The application must cache the refresh token securely for long-term use.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the provided credentials were not recognised.
    @sect{Refreshing the access token}
      To obtain a new @b{access} token, @b{POST} a refresh request to
        @p
          @hl.asciidoc{/refresh}
        @p
          with an empty body and the value of a valid @b{refresh} token in the @hl.asciidoc{X-Auth-Token} header.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}: successful access token renewal.
              @p The body is JSON object containing a single field, @b{accessToken}: @hl.js{@SigninExamples.refreshResult}
              @p
                The application must cache and reuse the access token until it is rejected with the @hl.asciidoc{HTTP 401 Unauthorized} code, in which case the application must request
                a new access token using this end-point and retry the affected request. Existing access tokens are automatically expired and do not need to be de-activated explicitly.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the refresh token is missing or invalid.
    @sect{Using the access token}
      @p Any API request that requires authentication (all of them at the moment) must include the access token exactly as returned by the server.
      @p The token should be sent in the @hl.asciidoc{X-Auth-Token} header.
      @p The @hl.asciidoc{HTTP 401 Unauthorized} response must be expected for any API request. To correctly handle this response, the application must request a new access token
         and retry the request.

  @sect{User management}

    @sect{CSV file format for user records}
      @p
        The CSV file format for user records is as follows:
      @p
        @{
          table(tr(th("User name"), th("Password"), th("Name"), th("E-mail"), th("Phone"), th("Custom field 1"), th("...")),
                tr(td("user1"), td("P455w0rd"), td("John Smith"), td("john@smith.com"), td(""), td("Custom value 1"), td("...")),
                tr(td("user2"), td("P455w0rd"), td("Jack Black"), td("jack@black.com"), td("+44123123123"), td("Custom value 1"), td("...")),
                tr(td("..."), td("..."), td("..."), td("..."), td("..."), td("..."), td("...")))
        }
      @p
        The first two columns of the header (first row) are mandatory and must be @b{"User name"} and @b{"Password"}, in that order. Other columns order is not fixed.
      @p
        The system will accept the following optional standard column names:
        @ul
          @li
            @b{"Name"} for the user's real name
          @li
            @b{"E-mail"} OR @b{"Email"} for the user's e-mail address
          @li
            @b{"Phone"} for the user's phone number
      @p
        If one of these columns is missing, or if some individual cells in one of the optional columns are blank, then the corresponding fields
        in the user records will be empty.
      @p
        All other column names will be treated as custom data fields and will go to the user's custom fields map.

    @sect{List global user accounts}
      To get a list of system-wide user accounts, that is accounts that are not associated with a particular survey,
        @p
          @b{GET} @hl.asciidoc{/admin/users?offset=<offset>&limit=<limit>}
        @p
          where
          @ul
            @li
              @b{offset} is the number of records to skip.
            @li
              @b{limit} is the number of records to return, starting at @b{offset}. There is a hard limit of 1000 records that can be returned at once.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}
              @p The body is a JSON array of global user record objects:
              @p
                @hl.js{@UserManagementExamples.globalUserRecord}
              @p
                 where
                  @ul
                    @li
                      @b{userName} is the user ID required to sign in,
                    @li
                      @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                    @li
                      @b{email} is the optional e-mail address,
                    @li
                      @b{phone} is the optional phone number (used for SMS notifications),
                    @li
                      @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),
                    @li
                      @b{roles} is the set of general roles for this user,
                    @li
                      @b{permissions} is the set of fine-grained permissions for this user.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
    @sect{Create/update global user accounts}
      To create or update system-wide user accounts,
      @p
        @b{POST} @hl.asciidoc{/admin/users/create-or-update}
      @p
        with a body consisting of a JSON object with a single field, @b{userRecords}, containing an array of user record objects:
        @p
          @hl.js{@UserManagementExamples.globalUserUpdate}
        @p
           where
            @ul
              @li
                @b{userName} is the user ID required to sign in,
              @li
                @b{password} is the user's password required to sign in,
              @li
                @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
              @li
                @b{email} is the optional e-mail address,
              @li
                @b{phone} is the optional phone number (used for SMS notifications),
              @li
                @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),
              @li
                @b{roles} is the set of general roles for this user,
              @li
                @b{permissions} is the set of fine-grained permissions for this user.

        @p
          @b{Note:} if there is already a user record matching one of the specified user names, the record will be updated. Otherwise, a new record will be created.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.

    @sect{Delete global users}
      To delete one or more system-wide users,
      @p
        @b{DELETE} @hl.asciidoc{/admin/users/delete}
      @p
        with a body consisting of a JSON object with a single field, @b{userNames}, containing an array of user names to delete:
      @p
        @hl.js{@UserManagementExamples.globalUserDelete}
      @p
        @b{Note:} users names that don't match any existing user records will be ignored.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully deleted (or ignored if not found).
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.

    @sect{List survey staff accounts}
      To get a list of staff user accounts for a survey,
        @p
          @b{GET} @hl.asciidoc{/admin/users/<survey id>/staff?offset=<offset>&limit=<limit>}
        @p
          where
          @ul
            @li
              @b{survey id} is the ID of the survey,
            @li
              @b{offset} is the number of records to skip,
            @li
              @b{limit} is the number of records to return, starting at @b{offset}. There is a hard limit of 1000 records that can be returned at once.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}
              @p The body is a JSON array of survey user record objects:
              @p
                @hl.js{@UserManagementExamples.surveyUserRecord}
              @p
                 where
                  @ul
                    @li
                      @b{userName} is the user ID required to sign in,
                    @li
                      @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                    @li
                      @b{email} is the optional e-mail address,
                    @li
                      @b{phone} is the optional phone number (used for SMS notifications),
                    @li
                      @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
            @li
              @p @hl.asciidoc{HTTP 404 Not Found}: the survey ID is invalid.

    @sect{Create/update survey staff accounts}
      To create or update staff accounts for a survey,
        @p
          @b{POST} @hl.asciidoc{/admin/users/<survey id>/staff/create-or-update}
        @p
          where
          @ul
            @li
              @b{survey id} is the ID of the survey
        @p
          with a body consisting of a JSON object with a single field, @b{userRecords}, containing an array of user record objects:
          @p
            @hl.js{@UserManagementExamples.surveyUserUpdate}
          @p
             where
              @ul
                @li
                  @b{userName} is the user ID required to sign in,
                @li
                  @b{password} is the user's password required to sign in,
                @li
                  @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                @li
                  @b{email} is the optional e-mail address,
                @li
                  @b{phone} is the optional phone number (used for SMS notifications),
                @li
                  @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),

        @p
          @b{Note:} if there is already a user record matching one of the specified user names, the record will be updated. Otherwise, a new record will be created.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
            @li
              @p @hl.asciidoc{HTTP 404 Not Found}: the survey ID is invalid.
    @sect{Upload survey staff accounts using CSV}
      To create or update staff accounts for a survey using a CSV file,
      @p
        @b{POST} @hl.asciidoc{/admin/users/<survey id>/staff/upload-csv}
      @p
        where
        @ul
          @li
            @b{survey id} is the ID of the survey
      @p
        with a @b{multipart/form-data} body with a file attachment in the CSV format (see @sect.ref{CSV file format for user records}). The name of the file and the name of the form field are ignored.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
          @li
            @p @hl.asciidoc{HTTP 400 Bad Request}: the file format is incorrect.
          @li
            @p @hl.asciidoc{HTTP 404 Not Found}: the survey ID is invalid.

    @sect{List survey respondents}
     To get a list of respondent user accounts for a survey,
        @p
          @b{GET} @hl.asciidoc{/admin/users/<survey id>/respondents?offset=<offset>&limit=<limit>}
        @p
          where
          @ul
            @li
              @b{survey id} is the ID of the survey,
            @li
              @b{offset} is the number of records to skip,
            @li
              @b{limit} is the number of records to return, starting at @b{offset}. There is a hard limit of 1000 records that can be returned at once.
        @sect{Response}
          @ul
            @li
              @p @hl.asciidoc{HTTP 200 OK}
              @p The body is a JSON array of survey user record objects:
              @p
                @hl.js{@UserManagementExamples.surveyUserRecord}
              @p
                 where
                  @ul
                    @li
                      @b{userName} is the user ID required to sign in,
                    @li
                      @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                    @li
                      @b{email} is the optional e-mail address,
                    @li
                      @b{phone} is the optional phone number (used for SMS notifications),
                    @li
                      @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),
            @li
              @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
            @li
              @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
            @li
              @p @hl.asciidoc{HTTP 404 Not Found}: the survey ID is invalid.

    @sect{Create/update survey respondent accounts}
          To create or update respondent accounts for a survey,
            @p
              @b{POST} @hl.asciidoc{/admin/users/<survey id>/respondents/create-or-update}
            @p
              where
              @ul
                @li
                  @b{survey id} is the ID of the survey
            @p
              with a body consisting of a JSON object with a single field, @b{userRecords}, containing an array of user record objects:
              @p
                @hl.js{@UserManagementExamples.surveyUserUpdate}
              @p
                 where
                  @ul
                    @li
                      @b{userName} is the user ID required to sign in,
                    @li
                      @b{password} is the user's password required to sign in,
                    @li
                      @b{name} is the optional real name of the user (see @sect.ref{Optional type}),
                    @li
                      @b{email} is the optional e-mail address,
                    @li
                      @b{phone} is the optional phone number (used for SMS notifications),
                    @li
                      @b{customFields} is an object containing custom data about this user (the set of available custom fields depends on the survey),

            @p
              @b{Note:} if there is already a user record matching one of the specified user names, the record will be updated. Otherwise, a new record will be created.
            @sect{Response}
              @ul
                @li
                  @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
                @li
                  @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
                @li
                  @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
                @li
                  @p @hl.asciidoc{HTTP 404 Not Found}: the survey ID is invalid.


    @sect{Upload survey respondent accounts using CSV}
     To create or update respondent accounts for a survey using a CSV file,
      @p
        @b{POST} @hl.asciidoc{/admin/users/<survey id>/respondents/upload-csv}
      @p
        where
        @ul
          @li
            @b{survey id} is the ID of the survey
      @p
        with a @b{multipart/form-data} body with a file attachment in the CSV format (see @sect.ref{CSV file format for user records}). The name of the file and the name of the form field are ignored.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully updated.
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
          @li
            @p @hl.asciidoc{HTTP 400 Bad Request}: the file format is incorrect.
          @li
            @p @hl.asciidoc{HTTP 404 Not Found}: the survey ID is invalid.

    @sect{Delete survey user accounts}
     To delete one or more system-wide users,
      @p
        @b{DELETE} @hl.asciidoc{/admin/users/<survey id>/delete}
      @p
        where
        @ul
          @li
            @b{survey id} is the ID of the survey
      @p
        with a body consisting of a JSON object with a single field, @b{userNames}, containing an array of user names to delete:
      @p
        @hl.js{@UserManagementExamples.globalUserDelete}
      @p
        @b{Note:} users names that don't match any existing user records will be ignored.
      @sect{Response}
        @ul
          @li
            @p @hl.asciidoc{HTTP 200 OK}: the users have been successfully deleted (or ignored if not found).
          @li
            @p @hl.asciidoc{HTTP 401 Unauthorized}: the access token is missing, invalid, or has expired. Get a new token and try again.
          @li
            @p @hl.asciidoc{HTTP 403 Forbidden}: the access token is valid, but you don't have the right to perform this operation.
          @li
            @p @hl.asciidoc{HTTP 404 Not Found}: the survey ID is invalid.
