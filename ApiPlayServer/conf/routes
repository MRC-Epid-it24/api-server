# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

POST    /signin                     controllers.Auth.signin

GET     /users/:survey/:userName    controllers.Users.info(survey: String, userName: String)

GET     /surveys/:survey            controllers.Surveys.info(survey: String)

GET     /lookup/:locale/:term               controllers.FoodIndexController.lookup(locale, term)

GET     /categories/code-available/:code    controllers.FoodDataWrite.isCategoryCodeAvailable(code)
GET     /categories/:locale                 controllers.FoodDataRead.rootCategories(locale: String)
GET     /categories/:locale/all             controllers.FoodDataRead.allCategories(locale: String)
GET     /categories/:locale/search/:term    controllers.FoodDataRead.searchCategories(term: String, locale: String)
GET     /categories/:locale/:code           controllers.FoodDataRead.categoryContents(code: String, locale: String)
GET     /categories/:locale/:code/definition           controllers.FoodDataRead.categoryDef(code: String, locale: String)
GET     /categories/:locale/:code/parent-categories    controllers.FoodDataRead.categoryParentCategories(code: String, locale: String)
GET     /categories/:locale/:code/all-categories       controllers.FoodDataRead.categoryAllCategories(code: String, locale: String)

PUT     /categories/:categoryCode/foods/:foodCode                  controllers.FoodDataWrite.addFoodToCategory(categoryCode: String, foodCode: String)
DELETE  /categories/:categoryCode/foods/:foodCode                  controllers.FoodDataWrite.removeFoodFromCategory(categoryCode: String, foodCode: String)
PUT     /categories/:categoryCode/subcategories/:subcategoryCode   controllers.FoodDataWrite.addSubcategoryToCategory(categoryCode: String, subcategoryCode: String)
DELETE  /categories/:categoryCode/subcategories/:subcategoryCode   controllers.FoodDataWrite.removeSubcategoryFromCategory(categoryCode: String, subcategoryCode: String)
POST    /categories/new                         controllers.FoodDataWrite.createCategory()
POST    /categories/:code                       controllers.FoodDataWrite.updateCategoryBase(code: String)
POST    /categories/:locale/:code               controllers.FoodDataWrite.updateCategoryLocal(code: String, locale: String)
DELETE  /categories/:code                       controllers.FoodDataWrite.deleteCategory(code: String)

GET     /foods/code-available/:code             controllers.FoodDataWrite.isFoodCodeAvailable(code: String)
GET     /foods/:locale/uncategorised            controllers.FoodDataRead.uncategorisedFoods(locale: String)
GET     /foods/:locale/search/:term             controllers.FoodDataRead.searchFoods(term: String, locale: String)
GET     /foods/:locale/:code/definition         controllers.FoodDataRead.foodDef(code: String, locale: String)
GET     /foods/:locale/:code/parent-categories  controllers.FoodDataRead.foodParentCategories(code: String, locale: String)
GET     /foods/:locale/:code/all-categories     controllers.FoodDataRead.foodAllCategories(code: String, locale: String)
GET     /foods/:locale/:code/associated-foods   controllers.FoodDataRead.associatedFoodPrompts(code: String, locale: String)
GET     /foods/:locale/:code/brand-names        controllers.FoodDataRead.brandNames(code: String, locale: String)
GET     /foods/:locale/:code                    controllers.FoodDataRead.foodData(code: String, locale: String)

POST    /foods/new                              controllers.FoodDataWrite.createFood()
POST    /foods/:code                            controllers.FoodDataWrite.updateFoodBase(code: String)
POST    /foods/:locale/:code                    controllers.FoodDataWrite.updateFoodLocal(code: String, locale: String)
DELETE  /foods/:code                            controllers.FoodDataWrite.deleteFood(code)

GET     /food-groups/:locale                    controllers.FoodDataRead.allFoodGroups(locale: String)
GET     /food-groups/:locale/:id                controllers.FoodDataRead.foodGroup(id: Int, locale: String)

GET     /portion-size/as-served         controllers.FoodDataRead.allAsServedSets()
GET     /portion-size/as-served/:id     controllers.FoodDataRead.asServedDef(id: String)
GET     /portion-size/guide-image       controllers.FoodDataRead.allGuideImages()
GET     /portion-size/guide-image/:id   controllers.FoodDataRead.guideDef(id: String)
GET     /portion-size/drinkware         controllers.FoodDataRead.allDrinkware()
GET     /portion-size/drinkware/:id     controllers.FoodDataRead.drinkwareDef(id: String)

GET     /synsets/:locale                controllers.FoodDataRead.synsets(locale: String)
GET     /split-list/:locale             controllers.FoodDataRead.splitList(locale: String)

GET     /nutrient-tables                controllers.FoodDataRead.nutrientTables()

OPTIONS /*dontcare                  controllers.Application.corsPreflight(dontcare: String)
