# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

POST    /signin                     controllers.Auth.signin

GET     /users/:survey/:userName    controllers.Users.info(survey: String, userName: String)

GET     /surveys/:survey            controllers.Surveys.info(survey: String)

GET     /index/lookup/:locale/:term               controllers.FoodIndexController.lookup(locale, term)

GET     /admin/locales							  controllers.LocaleController.list()

GET     /admin/categories/code-available/:code    controllers.AdminFoodDataController.isCategoryCodeAvailable(code)
GET     /admin/categories/:locale                 controllers.AdminFoodDataController.rootCategories(locale: String)

GET     /admin/categories/:locale/search/:term    controllers.AdminFoodDataController.searchCategories(term: String, locale: String)
GET     /admin/categories/:locale/:code           controllers.AdminFoodDataController.categoryContents(code: String, locale: String)
GET     /admin/categories/:locale/:code/definition           controllers.AdminFoodDataController.categoryDef(code: String, locale: String)
GET     /admin/categories/:locale/:code/parent-categories    controllers.AdminFoodDataController.categoryParentCategories(code: String, locale: String)
GET     /admin/categories/:locale/:code/all-categories       controllers.AdminFoodDataController.categoryAllCategories(code: String, locale: String)
GET     /admin/categories/:locale/:code/problems             controllers.ProblemChecker.checkCategory(code: String, locale: String)
GET     /admin/categories/:locale/:code/problems/recursive   controllers.ProblemChecker.checkCategoryRecursive(code: String, locale: String)

PUT     /admin/categories/:categoryCode/foods/:foodCode                  controllers.AdminFoodDataController.addFoodToCategory(categoryCode: String, foodCode: String)
DELETE  /admin/categories/:categoryCode/foods/:foodCode                  controllers.AdminFoodDataController.removeFoodFromCategory(categoryCode: String, foodCode: String)
PUT     /admin/categories/:categoryCode/subcategories/:subcategoryCode   controllers.AdminFoodDataController.addSubcategoryToCategory(categoryCode: String, subcategoryCode: String)
DELETE  /admin/categories/:categoryCode/subcategories/:subcategoryCode   controllers.AdminFoodDataController.removeSubcategoryFromCategory(categoryCode: String, subcategoryCode: String)
POST    /admin/categories/new                         controllers.AdminFoodDataController.createCategory()
POST    /admin/categories/:code                       controllers.AdminFoodDataController.updateCategoryBase(code: String)
POST    /admin/categories/:locale/:code               controllers.AdminFoodDataController.updateCategoryLocal(code: String, locale: String)
DELETE  /admin/categories/:code                       controllers.AdminFoodDataController.deleteCategory(code: String)

GET     /admin/foods/code-available/:code             controllers.AdminFoodDataController.isFoodCodeAvailable(code: String)
GET     /admin/foods/:locale/uncategorised            controllers.AdminFoodDataController.uncategorisedFoods(locale: String)
GET     /admin/foods/:locale/search/:term             controllers.AdminFoodDataController.searchFoods(term: String, locale: String)
GET     /admin/foods/:locale/:code/definition         controllers.AdminFoodDataController.foodDef(code: String, locale: String)
GET     /admin/foods/:locale/:code/parent-categories  controllers.AdminFoodDataController.foodParentCategories(code: String, locale: String)
GET     /admin/foods/:locale/:code/all-categories     controllers.AdminFoodDataController.foodAllCategories(code: String, locale: String)
GET     /admin/foods/:locale/:code/problems           controllers.ProblemChecker.checkFood(code: String, locale: String)



POST    /admin/foods/new                              controllers.AdminFoodDataController.createFood()
POST    /admin/foods/:code                            controllers.AdminFoodDataController.updateFoodBase(code: String)
POST    /admin/foods/:locale/:code                    controllers.AdminFoodDataController.updateFoodLocal(code: String, locale: String)
DELETE  /admin/foods/:code                            controllers.AdminFoodDataController.deleteFood(code)

GET     /admin/food-groups/:locale                    controllers.AdminFoodDataController.allFoodGroups(locale: String)
GET     /admin/food-groups/:locale/:id                controllers.AdminFoodDataController.foodGroup(id: Int, locale: String)

GET     /admin/portion-size/as-served         controllers.AdminFoodDataController.allAsServedSets()
GET     /admin/portion-size/guide-image       controllers.AdminFoodDataController.allGuideImages()
GET     /admin/portion-size/drinkware         controllers.AdminFoodDataController.allDrinkware()

GET     /user/portion-size/as-served/:id     controllers.UserFoodDataController.asServedDef(id: String)
GET     /user/portion-size/guide-image/:id   controllers.UserFoodDataController.guideDef(id: String)
GET     /user/portion-size/drinkware/:id     controllers.UserFoodDataController.drinkwareDef(id: String)

GET     /user/foods/:locale/:code                    controllers.UserFoodDataController.foodData(code: String, locale: String)
GET     /user/foods/:locale/:code/with-sources       controllers.UserFoodDataController.foodDataWithSources(code: String, locale: String)
GET     /user/foods/:locale/:code/brand-names        controllers.UserFoodDataController.brandNames(code: String, locale: String)
GET     /user/foods/:locale/:code/associated-foods   controllers.UserFoodDataController.associatedFoodPrompts(code: String, locale: String)

# GET     /index/synsets/:locale                controllers.FoodIndexController.synsets(locale: String)
# GET     /index/split-list/:locale             controllers.FoodIndexController.splitList(locale: String)

GET     /admin/nutrient-tables                controllers.AdminFoodDataController.nutrientTables()

OPTIONS /*dontcare                  controllers.Application.corsPreflight(dontcare: String)
